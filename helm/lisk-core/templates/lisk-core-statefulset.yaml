---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ .Release.Name }}-lisk-core"
  labels:
    app.kubernetes.io/name: "{{ include "lisk-core.name" . }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ include "lisk-core.chart" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.persistence.enable }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.storage }}
  {{- end }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ include "lisk-core.name" . }}"
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ include "lisk-core.name" . }}"
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      volumes:
        - name: initdb
          emptyDir: {}
      {{- if .Values.lisk.coldstart }}
      initContainers:
        - name: download-snapshot
          image: busybox
          volumeMounts:
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: data
              mountPath: /var/lib/postgresql
          command:
            - "/bin/sh"
            - "-c"
            - |
              if [ -f /var/lib/postgresql/pgdata/PG_VERSION ] ; then
                echo "Database already initialized, skipping download."
              else
                wget https://downloads.lisk.io/lisk/{{ .Values.lisk.network }}/blockchain.db.gz -O /docker-entrypoint-initdb.d/00-blockchain.sql.gz
                cat <<EOF > /docker-entrypoint-initdb.d/99-clean-up.sh
              rm /docker-entrypoint-initdb.d/00-blockchain.sql.gz
              EOF
              fi
      {{- end }}
      containers:
        - name: lisk
          image: {{ .Values.lisk.image.repository }}:{{ .Values.lisk.image.tag }}
          env:
            - name: LISK_DB_USER
              value: {{ .Values.lisk.database.user }}
            - name: LISK_DB_PASSWORD
              value: {{ .Values.lisk.database.password }}
            - name: LISK_DB_NAME
              value: {{ .Values.lisk.network }}
            - name: LISK_CONSOLE_LOG_LEVEL
              value: {{ .Values.lisk.loglevel }}
            - name: LISK_NETWORK
              value: {{ .Values.lisk.network }}
            - name: LISK_WS_PORT
              value: "{{ .Values.lisk.wsPort }}"
            - name: LISK_HTTP_PORT
              value: "{{ .Values.lisk.httpPort }}"
            - name: LISK_API_PUBLIC
              value: "{{ .Values.lisk.api.public }}"
          command:
            - "/home/lisk/wait-for-it.sh"
            - "-t"
            - "0"
            - "127.0.0.1:5432"
            - "--"
            - "npm"
            - "start"
          ports:
            - name: lisk-core-http
              containerPort: {{ .Values.lisk.httpPort }}
            - name: lisk-core-ws
              containerPort: {{ .Values.lisk.wsPort }}
        - name: database
          image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          volumeMounts:
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: data
              mountPath: /var/lib/postgresql
          env:
            - name: PGDATA
              value: /var/lib/postgresql/pgdata
            - name: POSTGRES_USER
              value: {{ .Values.lisk.database.user }}
            - name: POSTGRES_DB
              value: {{ .Values.lisk.network }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.lisk.database.password }}

