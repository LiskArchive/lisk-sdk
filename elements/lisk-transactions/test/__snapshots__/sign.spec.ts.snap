// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sign getSigningBytes should return transaction bytes for given params 1`] = `
Object {
  "data": Array [
    10,
    4,
    0,
    0,
    0,
    2,
    18,
    4,
    0,
    0,
    0,
    0,
    24,
    1,
    32,
    128,
    173,
    226,
    4,
    42,
    32,
    241,
    185,
    244,
    238,
    113,
    181,
    213,
    133,
    125,
    59,
    52,
    109,
    68,
    28,
    169,
    103,
    242,
    120,
    112,
    235,
    238,
    136,
    86,
    157,
    179,
    100,
    253,
    19,
    226,
    138,
    219,
    163,
    50,
    33,
    8,
    128,
    250,
    191,
    166,
    178,
    182,
    143,
    7,
    18,
    20,
    58,
    151,
    31,
    208,
    43,
    74,
    7,
    252,
    32,
    170,
    209,
    147,
    109,
    60,
    177,
    210,
    99,
    185,
    110,
    15,
    26,
    0,
  ],
  "type": "Buffer",
}
`;

exports[`sign signTransaction should return signed transaction for given params schema 1`] = `
Object {
  "commandID": Object {
    "data": Array [
      0,
      0,
      0,
      0,
    ],
    "type": "Buffer",
  },
  "fee": 10000000n,
  "id": Object {
    "data": Array [
      134,
      7,
      234,
      87,
      148,
      70,
      82,
      13,
      80,
      124,
      30,
      217,
      82,
      25,
      105,
      126,
      48,
      195,
      92,
      119,
      147,
      247,
      140,
      57,
      229,
      153,
      51,
      209,
      110,
      185,
      7,
      214,
    ],
    "type": "Buffer",
  },
  "moduleID": Object {
    "data": Array [
      0,
      0,
      0,
      2,
    ],
    "type": "Buffer",
  },
  "nonce": 1n,
  "params": Object {
    "amount": 4008489300000000n,
    "data": "",
    "recipientAddress": Object {
      "data": Array [
        58,
        151,
        31,
        208,
        43,
        74,
        7,
        252,
        32,
        170,
        209,
        147,
        109,
        60,
        177,
        210,
        99,
        185,
        110,
        15,
      ],
      "type": "Buffer",
    },
  },
  "senderPublicKey": Object {
    "data": Array [
      241,
      185,
      244,
      238,
      113,
      181,
      213,
      133,
      125,
      59,
      52,
      109,
      68,
      28,
      169,
      103,
      242,
      120,
      112,
      235,
      238,
      136,
      86,
      157,
      179,
      100,
      253,
      19,
      226,
      138,
      219,
      163,
    ],
    "type": "Buffer",
  },
  "signatures": Array [
    Object {
      "data": Array [
        187,
        248,
        243,
        18,
        92,
        205,
        206,
        123,
        212,
        0,
        135,
        48,
        12,
        155,
        1,
        199,
        159,
        204,
        169,
        156,
        98,
        167,
        158,
        24,
        226,
        173,
        231,
        254,
        15,
        196,
        47,
        177,
        206,
        86,
        194,
        58,
        178,
        187,
        38,
        64,
        20,
        95,
        135,
        42,
        140,
        194,
        175,
        47,
        80,
        213,
        250,
        117,
        94,
        63,
        46,
        117,
        207,
        80,
        166,
        165,
        4,
        22,
        79,
        3,
      ],
      "type": "Buffer",
    },
  ],
}
`;

exports[`sign signTransactionWithPrivateKey should return signed transaction for given params schema 1`] = `
Object {
  "commandID": Object {
    "data": Array [
      0,
      0,
      0,
      0,
    ],
    "type": "Buffer",
  },
  "fee": 10000000n,
  "id": Object {
    "data": Array [
      209,
      41,
      161,
      125,
      164,
      152,
      209,
      235,
      91,
      149,
      171,
      245,
      229,
      118,
      162,
      53,
      123,
      213,
      99,
      152,
      100,
      17,
      187,
      227,
      220,
      146,
      237,
      42,
      101,
      102,
      133,
      69,
    ],
    "type": "Buffer",
  },
  "moduleID": Object {
    "data": Array [
      0,
      0,
      0,
      2,
    ],
    "type": "Buffer",
  },
  "nonce": 1n,
  "params": Object {
    "amount": 4008489300000000n,
    "data": "",
    "recipientAddress": Object {
      "data": Array [
        58,
        151,
        31,
        208,
        43,
        74,
        7,
        252,
        32,
        170,
        209,
        147,
        109,
        60,
        177,
        210,
        99,
        185,
        110,
        15,
      ],
      "type": "Buffer",
    },
  },
  "senderPublicKey": Object {
    "data": Array [
      241,
      185,
      244,
      238,
      113,
      181,
      213,
      133,
      125,
      59,
      52,
      109,
      68,
      28,
      169,
      103,
      242,
      120,
      112,
      235,
      238,
      136,
      86,
      157,
      179,
      100,
      253,
      19,
      226,
      138,
      219,
      163,
    ],
    "type": "Buffer",
  },
  "signatures": Array [
    Object {
      "data": Array [
        242,
        205,
        165,
        48,
        14,
        192,
        204,
        160,
        155,
        132,
        151,
        212,
        102,
        117,
        71,
        40,
        128,
        196,
        216,
        211,
        108,
        194,
        253,
        193,
        52,
        109,
        21,
        125,
        165,
        75,
        24,
        88,
        254,
        36,
        255,
        108,
        196,
        239,
        15,
        30,
        152,
        90,
        103,
        59,
        117,
        147,
        52,
        94,
        235,
        210,
        202,
        28,
        46,
        242,
        50,
        234,
        133,
        102,
        10,
        61,
        211,
        80,
        141,
        11,
      ],
      "type": "Buffer",
    },
  ],
}
`;

exports[`sign when running scenario "multisignature_registration_transaction" Both mandatory and optional member group should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Only mandatory members should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Only optional members should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Second signature case should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Sender is a member of the group should have correct signatures 1`] = `[Function]`;
