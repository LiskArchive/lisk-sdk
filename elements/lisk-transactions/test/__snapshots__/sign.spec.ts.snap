// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sign getSigningBytes should return transaction bytes for given params 1`] = `
Object {
  "data": Array [
    8,
    2,
    16,
    0,
    24,
    1,
    32,
    128,
    173,
    226,
    4,
    42,
    32,
    241,
    185,
    244,
    238,
    113,
    181,
    213,
    133,
    125,
    59,
    52,
    109,
    68,
    28,
    169,
    103,
    242,
    120,
    112,
    235,
    238,
    136,
    86,
    157,
    179,
    100,
    253,
    19,
    226,
    138,
    219,
    163,
    50,
    33,
    8,
    128,
    250,
    191,
    166,
    178,
    182,
    143,
    7,
    18,
    20,
    58,
    151,
    31,
    208,
    43,
    74,
    7,
    252,
    32,
    170,
    209,
    147,
    109,
    60,
    177,
    210,
    99,
    185,
    110,
    15,
    26,
    0,
  ],
  "type": "Buffer",
}
`;

exports[`sign signTransaction should return signed transaction for given params schema 1`] = `
Object {
  "commandID": 0,
  "fee": 10000000n,
  "id": Object {
    "data": Array [
      75,
      176,
      140,
      227,
      155,
      169,
      35,
      186,
      26,
      0,
      217,
      3,
      97,
      203,
      142,
      247,
      148,
      206,
      174,
      108,
      49,
      203,
      86,
      111,
      72,
      167,
      176,
      52,
      219,
      216,
      140,
      133,
    ],
    "type": "Buffer",
  },
  "moduleID": 2,
  "nonce": 1n,
  "params": Object {
    "amount": 4008489300000000n,
    "data": "",
    "recipientAddress": Object {
      "data": Array [
        58,
        151,
        31,
        208,
        43,
        74,
        7,
        252,
        32,
        170,
        209,
        147,
        109,
        60,
        177,
        210,
        99,
        185,
        110,
        15,
      ],
      "type": "Buffer",
    },
  },
  "senderPublicKey": Object {
    "data": Array [
      241,
      185,
      244,
      238,
      113,
      181,
      213,
      133,
      125,
      59,
      52,
      109,
      68,
      28,
      169,
      103,
      242,
      120,
      112,
      235,
      238,
      136,
      86,
      157,
      179,
      100,
      253,
      19,
      226,
      138,
      219,
      163,
    ],
    "type": "Buffer",
  },
  "signatures": Array [
    Object {
      "data": Array [
        146,
        79,
        7,
        189,
        177,
        74,
        130,
        143,
        32,
        147,
        154,
        206,
        62,
        126,
        186,
        226,
        188,
        15,
        185,
        216,
        166,
        172,
        208,
        152,
        59,
        22,
        38,
        121,
        9,
        102,
        104,
        18,
        103,
        177,
        126,
        91,
        6,
        240,
        74,
        137,
        92,
        218,
        112,
        89,
        146,
        245,
        198,
        22,
        59,
        46,
        242,
        23,
        154,
        135,
        208,
        24,
        176,
        98,
        170,
        120,
        13,
        127,
        175,
        11,
      ],
      "type": "Buffer",
    },
  ],
}
`;

exports[`sign signTransactionWithPrivateKey should return signed transaction for given params schema 1`] = `
Object {
  "commandID": 0,
  "fee": 10000000n,
  "id": Object {
    "data": Array [
      133,
      12,
      170,
      149,
      168,
      33,
      136,
      73,
      31,
      142,
      147,
      5,
      243,
      117,
      54,
      244,
      103,
      34,
      216,
      120,
      68,
      161,
      53,
      233,
      27,
      133,
      76,
      156,
      220,
      6,
      224,
      241,
    ],
    "type": "Buffer",
  },
  "moduleID": 2,
  "nonce": 1n,
  "params": Object {
    "amount": 4008489300000000n,
    "data": "",
    "recipientAddress": Object {
      "data": Array [
        58,
        151,
        31,
        208,
        43,
        74,
        7,
        252,
        32,
        170,
        209,
        147,
        109,
        60,
        177,
        210,
        99,
        185,
        110,
        15,
      ],
      "type": "Buffer",
    },
  },
  "senderPublicKey": Object {
    "data": Array [
      241,
      185,
      244,
      238,
      113,
      181,
      213,
      133,
      125,
      59,
      52,
      109,
      68,
      28,
      169,
      103,
      242,
      120,
      112,
      235,
      238,
      136,
      86,
      157,
      179,
      100,
      253,
      19,
      226,
      138,
      219,
      163,
    ],
    "type": "Buffer",
  },
  "signatures": Array [
    Object {
      "data": Array [
        255,
        231,
        1,
        169,
        213,
        103,
        134,
        178,
        65,
        151,
        53,
        101,
        106,
        115,
        119,
        238,
        55,
        135,
        78,
        22,
        30,
        196,
        123,
        198,
        193,
        225,
        83,
        105,
        14,
        108,
        81,
        38,
        188,
        176,
        146,
        147,
        177,
        7,
        224,
        202,
        191,
        239,
        6,
        84,
        96,
        218,
        210,
        219,
        64,
        118,
        47,
        225,
        62,
        93,
        228,
        81,
        188,
        117,
        28,
        228,
        150,
        148,
        191,
        8,
      ],
      "type": "Buffer",
    },
  ],
}
`;

exports[`sign when running scenario "multisignature_registration_transaction" Both mandatory and optional member group should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Only mandatory members should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Only optional members should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Second signature case should have correct signatures 1`] = `[Function]`;

exports[`sign when running scenario "multisignature_registration_transaction" Sender is a member of the group should have correct signatures 1`] = `[Function]`;
