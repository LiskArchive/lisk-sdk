// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema/application_config_schema.js application config schema must match to the snapshot. 1`] = `
Object {
  "additionalProperties": false,
  "default": Object {
    "app": Object {
      "genesisConfig": Object {
        "BLOCK_TIME": 10,
        "DELEGATE_LIST_ROUND_OFFSET": 2,
        "EPOCH_TIME": "2016-05-24T17:00:00.000Z",
        "MAX_TRANSACTIONS_PER_BLOCK": 25,
        "REWARDS": Object {
          "DISTANCE": 3000000,
          "MILESTONES": Array [
            "500000000",
            "400000000",
            "300000000",
            "200000000",
            "100000000",
          ],
          "OFFSET": 2160,
        },
      },
      "ipc": Object {
        "enabled": false,
      },
      "label": "alpha-sdk-app",
      "minVersion": "0.0.0",
      "protocolVersion": "1.1",
      "tempPath": "/tmp/lisk",
      "version": "0.0.0",
    },
    "components": Object {
      "cache": Object {},
      "logger": Object {},
      "storage": Object {},
      "system": Object {},
    },
    "modules": Object {
      "chain": Object {},
      "http_api": Object {},
    },
  },
  "id": "#/app/config",
  "properties": Object {
    "app": Object {
      "properties": Object {
        "buildVersion": Object {
          "description": "The build number. Consists of \`v\` + the date and time of the build of the node.",
          "example": "v09:54:35 12/04/2017",
          "type": "string",
        },
        "genesisConfig": Object {
          "additionalProperties": false,
          "id": "#/app/genesisConfig",
          "properties": Object {
            "BLOCK_TIME": Object {
              "description": "Slot time interval in seconds",
              "minimum": 2,
              "type": "number",
            },
            "DELEGATE_LIST_ROUND_OFFSET": Object {
              "description": "Number of rounds before in which the list of delegates will be used for the current round - i.e. The set of active delegates that will be chosen to forge during round \`r\` will be taken from the list generated in the end of round \`r - DELEGATE_LIST_ROUND_OFFSET\`",
              "minimum": 0,
              "type": "number",
            },
            "EPOCH_TIME": Object {
              "description": "Timestamp indicating the start of Lisk Core (\`Date.toISOString()\`)",
              "format": "date-time",
              "type": "string",
            },
            "MAX_TRANSACTIONS_PER_BLOCK": Object {
              "description": "Maximum number of transactions allowed per block",
              "maximum": 150,
              "minimum": 1,
              "type": "integer",
            },
            "REWARDS": Object {
              "additionalProperties": false,
              "description": "Object representing LSK rewards milestone",
              "id": "rewards",
              "properties": Object {
                "DISTANCE": Object {
                  "description": "Distance between each milestone",
                  "minimum": 1,
                  "type": "integer",
                },
                "MILESTONES": Object {
                  "description": "Initial 5, and decreasing until 1",
                  "items": Object {
                    "format": "amount",
                    "type": "string",
                  },
                  "type": "array",
                },
                "OFFSET": Object {
                  "description": "Start rewards at block (n)",
                  "minimum": 1,
                  "type": "integer",
                },
              },
              "required": Array [
                "MILESTONES",
                "OFFSET",
                "DISTANCE",
              ],
              "type": "object",
            },
          },
          "required": Array [
            "EPOCH_TIME",
            "BLOCK_TIME",
            "MAX_TRANSACTIONS_PER_BLOCK",
            "DELEGATE_LIST_ROUND_OFFSET",
            "REWARDS",
          ],
          "type": "object",
        },
        "ipc": Object {
          "properties": Object {
            "enabled": Object {
              "type": "boolean",
            },
          },
          "type": "object",
        },
        "label": Object {
          "description": "Restricted length due to unix domain socket path length limitations.",
          "maxLength": 30,
          "minLength": 1,
          "pattern": "^[a-zA-Z][0-9a-zA-Z\\\\_\\\\-]*$",
          "type": "string",
        },
        "lastCommitId": Object {
          "description": "The version of Lisk Core that the peer node runs on.",
          "example": "968d7b5b97a5bfad8f77614dc8a9918de49f6c6e",
          "format": "hex",
          "maxLength": 40,
          "minLength": 40,
          "type": "string",
        },
        "minVersion": Object {
          "format": "version",
          "type": "string",
        },
        "protocolVersion": Object {
          "format": "protocolVersion",
          "type": "string",
        },
        "tempPath": Object {
          "description": "The root path for storing temporary pid and socket file. Restricted length due to unix domain socket path length limitations.",
          "example": "/tmp/lisk",
          "format": "path",
          "maxLength": 50,
          "minLength": 1,
          "type": "string",
        },
        "version": Object {
          "format": "version",
          "type": "string",
        },
      },
      "required": Array [
        "version",
        "minVersion",
        "protocolVersion",
        "ipc",
        "genesisConfig",
      ],
      "type": "object",
    },
    network: {
			type: 'object',
			properties: {
				wsPort: {
					type: 'integer',
					minimum: 1,
					maximum: 65535,
					env: 'LISK_WS_PORT',
					arg: '--port,-p',
				},
				hostIp: {
					type: 'string',
					format: 'ip',
					env: 'LISK_ADDRESS',
					arg: '--address,-a',
				},
				seedPeers: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							ip: {
								type: 'string',
								format: 'ipOrFQDN',
							},
							wsPort: {
								type: 'integer',
								minimum: 1,
								maximum: 65535,
							},
						},
					},
					env: { variable: 'LISK_PEERS', formatter: 'stringToIpPortSet' },
					arg: { name: '--peers,-x', formatter: 'stringToIpPortSet' },
				},
				blacklistedIPs: {
					type: 'array',
					items: {
						type: 'string',
						format: 'ip',
					},
				},
				fixedPeers: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							ip: {
								type: 'string',
								format: 'ip',
							},
							wsPort: {
								type: 'integer',
								minimum: 1,
								maximum: 65535,
							},
						},
					},
					maximum: 4,
				},
				whitelistedPeers: {
					type: 'array',
					items: {
						type: 'object',
						properties: {
							ip: {
								type: 'string',
								format: 'ip',
							},
							wsPort: {
								type: 'integer',
								minimum: 1,
								maximum: 65535,
							},
						},
					},
				},
				peerBanTime: {
					type: 'integer',
				},
				populatorInterval: {
					type: 'integer',
				},
				connectTimeout: {
					type: 'integer',
				},
				ackTimeout: {
					type: 'integer',
				},
				maxOutboundConnections: {
					type: 'integer',
				},
				maxInboundConnections: {
					type: 'integer',
				},
				sendPeerLimit: {
					type: 'integer',
					minimum: 1,
					maximum: 100,
				},
				maxPeerDiscoveryResponseLength: {
					type: 'integer',
					maximum: 1000,
				},
				maxPeerInfoSize: {
					type: 'integer',
					maximum: 20480,
				},
				wsMaxPayload: {
					type: 'integer',
					maximum: 3048576,
				},
				outboundShuffleInterval: {
					type: 'integer',
				},
				advertiseAddress: {
					type: 'boolean',
				},
			},
			required: ['seedPeers'],
			default: {
				wsPort: 5000,
				seedPeers: [],
			},
		},
    "components": Object {
      "properties": Object {
        "cache": Object {
          "type": "object",
        },
        "logger": Object {
          "type": "object",
        },
        "storage": Object {
          "type": "object",
        },
      },
      "required": Array [
        "logger",
        "cache",
        "storage",
      ],
      "type": "object",
    },
    "modules": Object {
      "properties": Object {
        "chain": Object {
          "type": "object",
        },
        "http_api": Object {
          "type": "object",
        },
      },
      "required": Array [
        "chain",
        "http_api",
      ],
      "type": "object",
    },
  },
  "required": Array [
    "app",
    "components",
    "modules",
  ],
  "type": "object",
}
`;
