@Library('lisk-jenkins') _

def setup(start_application=false) {
	cleanWs()
	unstash 'build'
	if(start_application) {
		nvm(getNodejsVersion()) {
			dir('framework') {
				sh '''
				# teardown_*() should have killed all node processes but we want to be sure
				# this shouldn't hurt assuming the 'lisk-core' jenkins nodes have 1 executor
				killall --verbose --wait node || true
				dropdb --if-exists lisk_dev
				createdb lisk_dev
				NODE_ENV=test LISK_CONSOLE_LOG_LEVEL=debug NEWRELIC_LICENSE_KEY= node test/test_app >.app.log 2>&1 &
				'''
			}
		}
		// wait for the Core API to be reachable
		timeout(1) {
			waitUntil {
				script {
					def api_available = sh script: 'curl http://localhost:4000/api/node/constants >/dev/null', returnStatus: true
					return (api_available == 0)
				}
			}
		}
	}
}

def run_mocha(test_name) {
	ansiColor('xterm') {
		timestamps {
			nvm(getNodejsVersion()) {
				dir('framework') {
					sh 'npm run mocha:' + "${test_name}" + ' ${MOCHA_OPTIONS:-$DEFAULT_MOCHA_OPTIONS}'
				}
			}
		}
	}
}

def run_jest(test_name) {
	ansiColor('xterm') {
		timestamps {
			nvm(getNodejsVersion()) {
				dir('framework') {
					sh 'npm run jest:' + "${test_name}" + ' ${JEST_OPTIONS}'
				}
			}
		}
	}
}

def teardown_mocha(test_name) {
	// teardown_mocha() gets called in post actions and so we don't want it to fail
	try {
		nvm(getNodejsVersion()) {
			dir('framework') {
				sh """
				rm -rf coverage_mocha_${test_name}; mkdir -p coverage_mocha_${test_name}
				npx istanbul report --root framework/test/mocha/.coverage-unit/ --dir framework/test/mocha/.coverage-unit/
				cp framework/test/mocha/.coverage-unit/lcov.info coverage_mocha_${test_name}/ || true
				npx istanbul report cobertura --root framework/test/mocha/.coverage-unit/ --dir framework/test/mocha/.coverage-unit/
				cp framework/test/mocha/.coverage-unit/cobertura-coverage.xml coverage_mocha_${test_name}/ || true
				curl http://localhost:4000/coverage/download --output functional-coverage.zip
				unzip functional-coverage.zip lcov.info -d coverage_mocha_${test_name}/functional/
				"""
			}
		}
	} catch(err) {
		println "Could gather coverage statistics from mocha:\n${err}"
	}
	dir('framework') {
		stash name: "coverage_mocha_${test_name}", includes: "coverage_mocha_${test_name}/"
	}
	timeout(1) {
		sh 'killall --verbose --wait node || true'
	}
	dir('framework') {
		sh """
		mv .app.log lisk_${test_name}.stdout.txt || true
		mv logs/devnet/lisk.log lisk_${test_name}.log || true
		"""
		archiveArtifacts artifacts: 'lisk_*.log', allowEmptyArchive: true
		archiveArtifacts artifacts: 'lisk_*.stdout.txt', allowEmptyArchive: true
	}
	cleanWs()
}

def teardown_jest(test_name) {
	// teardown_mocha() gets called in post actions and so we don't want it to fail
	try {
		dir('framework') {
			nvm(getNodejsVersion()) {
				sh """
				rm -rf coverage_jest_${test_name}; mkdir -p coverage_jest_${test_name}
				cp .coverage/${test_name}/lcov.info coverage_jest_${test_name}/ || echo "Jest lcov coverage not found"
				cp .coverage/${test_name}/cobertura-coverage.xml coverage_jest_${test_name}/ || echo "Jest cobertura coverage not found"
				"""
			}
		}
	} catch(err) {
		println "Could gather coverage statistics from jest:\n${err}"
	}
	dir('framework') {
		stash name: "coverage_jest_${test_name}", includes: "coverage_jest_${test_name}/", allowEmpty: true
	}
	timeout(1) {
		sh 'killall --verbose --wait node || true'
	}
	dir('framework') {
		sh """
		mv .app.log lisk_${test_name}.stdout.txt || true
		mv logs/devnet/lisk.log lisk_${test_name}.log || true
		"""
		archiveArtifacts artifacts: 'lisk_*.log', allowEmptyArchive: true
		archiveArtifacts artifacts: 'lisk_*.stdout.txt', allowEmptyArchive: true
	}
	cleanWs()
}

properties([
	parameters([
		string(name: 'MOCHA_OPTIONS', defaultValue: '-- --grep @slow|@unstable --invert', description: 'Please check readme to see available test tags. Example: `-- --grep something`', ),
		string(name: 'JEST_OPTIONS', defaultValue: '', description: 'Additional jest options that you want to provide to test runner. Example: `-- --config=<path>`'),
		// read by the application
		string(name: 'LOG_LEVEL', defaultValue: 'error', description: 'To get desired build log output change the log level', ),
		string(name: 'FILE_LOG_LEVEL', defaultValue: 'error', description: 'To get desired file log output change the log level', ),
		// used by tests
		string(name: 'LOG_DB_EVENTS', defaultValue: 'false', description: 'To get detailed info on db events log.', ),
		string(name: 'SILENT', defaultValue: 'true', description: 'To turn off test debug logs.', )
	 ])
])

pipeline {
	agent { node { label 'lisk-framework' } }

	environment {
		MAX_TASK_LIMIT = '20'
		DEFAULT_MOCHA_OPTIONS = "-- --grep @slow|@unstable --invert"
	}

	stages {
		stage('Build') {
			steps {
				nvm(getNodejsVersion()) {
					sh '''
					npm ci
					npm run bootstrap -- --ci
					npm run build
					# needed by one of the "Functional HTTP GET tests"
					git rev-parse HEAD > framework/REVISION
					'''
				}
				stash name: 'build'
			}
		}
		// dummy stage to have consistent ouput in both blue ocean and the classic webui
		stage('Parallel: jest') {
			parallel {
				stage('Jest Functional tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup(true)
						run_jest('functional')
					}
					post {
						cleanup {
							teardown_jest('functional')
						}
					}
				}
				stage('Jest Unit tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup()
						run_jest('unit')
					}
					post {
						cleanup {
							teardown_jest('unit')
						}
					}
				}
				stage('Jest Integration tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup()
						run_jest('integration')
					}
					post {
						cleanup {
							teardown_jest('integration')
						}
					}
				}
			}
		}
		stage('Parallel: mocha') {
			parallel {
				stage('Functional HTTP GET tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup(true)
						run_mocha('functional:get')
					}
					post {
						cleanup {
							teardown_mocha('get')
						}
					}
				}
				stage('Functional HTTP POST tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup(true)
						run_mocha('functional:post')
					}
					post {
						cleanup {
							teardown_mocha('post')
						}
					}
				}
				stage('Functional HTTP PUT tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup(true)
						run_mocha('functional:put')
					}
					post {
						cleanup {
							teardown_mocha('put')
						}
					}
				}
				stage ('Functional WS tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup(true)
						run_mocha('functional:ws')
					}
					post {
						cleanup {
							teardown_mocha('ws')
						}
					}
				}
				stage('Unit tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup()
						run_mocha('unit')
					}
					post {
						cleanup {
							teardown_mocha('unit')
						}
					}
				}
				stage('Integation tests') {
					agent { node { label 'lisk-framework' }}
					steps {
						setup()
						timeout(10) {
							run_mocha('integration')
						}
					}
					post {
						cleanup {
							teardown_mocha('integration')
						}
					}
				}
			}
		}

	}
	post {
		always {
			// teardown_*() should have run cleanWs()
			// but it can't hurt to make sure no old coverage files remain
			sh 'rm -rf coverage; mkdir -p coverage'
			script {
				dir('coverage') {
					['get', 'post', 'put', 'ws', 'unit', 'integration'].each {
						// some test stages might have failed and have no coverage data
						try {
							unstash "coverage_mocha_${it}"
						} catch(err) {
							println "Could not unstash mocha_${it}. Continuing."
						}
					}
					['functional', 'unit', 'integration'].each {
						// some test stages might have failed and have no coverage data
						try {
							unstash "coverage_jest_${it}"
						} catch(err) {
							println "Could not unstash jest_${it}. Continuing."
						}
					}
				}
				// it won't do to fail in a post action
				try {
					nvm(getNodejsVersion()) {
						sh '''
						find coverage/ -name lcov.info |sed 's/^/-a /' |xargs lcov -o coverage/merged.lcov
						sed -i -r -e "s#$WORKSPACE/#./#g" coverage/merged.lcov
						cp ~/.core_coveralls.yml .coveralls.yml
						npx coveralls <coverage/merged.lcov
						# remove prefix from package names
						sed -i -r -e "s/${WORKSPACE##*/}\\.//" coverage/coverage_*/cobertura-coverage.xml
						'''
					}
					cobertura coberturaReportFile: 'coverage_*/cobertura-coverage.xml'
				} catch(err) {
					println "Could not report coverage statistics:\n${err}"
				} finally {
					sh 'rm -f .coveralls.yml'
				}
			}
		}
		cleanup {
			cleanWs()
		}
	}
}
// vim: filetype=groovy
