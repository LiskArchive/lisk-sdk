{
	"version": "6.0.0-rc.3",
	"commands": {
		"console": {
			"id": "console",
			"description": "Lisk interactive REPL session to run commands.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"console",
				"console --api-ws=ws://localhost:8080",
				"console --api-ipc=/path/to/server"
			],
			"flags": {
				"api-ipc": {
					"name": "api-ipc",
					"type": "option",
					"description": "Enable api-client with IPC communication.",
					"multiple": false,
					"exclusive": ["api-ws"]
				},
				"api-ws": {
					"name": "api-ws",
					"type": "option",
					"description": "Enable api-client with Websocket communication.",
					"multiple": false,
					"exclusive": ["api-ipc"]
				}
			},
			"args": []
		},
		"hash-onion": {
			"id": "hash-onion",
			"description": "Create hash onions to be used by the forger.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"hash-onion --count=1000000 --distance=2000 --pretty",
				"hash-onion --count=1000000 --distance=2000 --output ~/my_onion.json"
			],
			"flags": {
				"output": {
					"name": "output",
					"type": "option",
					"char": "o",
					"description": "Output file path",
					"multiple": false
				},
				"count": {
					"name": "count",
					"type": "option",
					"char": "c",
					"description": "Total number of hashes to produce",
					"multiple": false,
					"default": 1000000
				},
				"distance": {
					"name": "distance",
					"type": "option",
					"char": "d",
					"description": "Distance between each hash",
					"multiple": false,
					"default": 1000
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed.",
					"allowNo": false
				}
			},
			"args": []
		},
		"init": {
			"id": "init",
			"description": "Bootstrap a blockchain application using Lisk SDK.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"init",
				"init --template lisk-ts",
				"init --template @some-global-npm-package",
				"init /project/path",
				"init /project/path --template lisk-ts"
			],
			"flags": {
				"template": {
					"name": "template",
					"type": "option",
					"char": "t",
					"description": "Template to bootstrap the application. It will read from `.liskrc.json` or use `lisk-ts` if not found.",
					"multiple": false
				},
				"registry": {
					"name": "registry",
					"type": "option",
					"description": "URL of a registry to download dependencies from.",
					"multiple": false
				}
			},
			"args": [
				{
					"name": "projectPath",
					"description": "Path to create the project.",
					"default": "/Users/ishan/repos/lisk-sdk/commander"
				}
			]
		},
		"endpoint:invoke": {
			"id": "endpoint:invoke",
			"description": "Invokes the provided endpoint.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"endpoint:invoke {endpoint} {parameters}",
				"endpoint:invoke --data-path --file",
				"endpoint:invoke generator_getAllKeys",
				"endpoint:invoke consensus_getBFTParameters '{\"height\": 2}' -d ~/.lisk/pos-mainchain --pretty",
				"endpoint:invoke consensus_getBFTParameters -f ./input.json"
			],
			"flags": {
				"data-path": {
					"name": "data-path",
					"type": "option",
					"char": "d",
					"description": "Directory path to specify where node data is stored. Environment variable \"LISK_DATA_PATH\" can also be used.",
					"multiple": false
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed.",
					"allowNo": false
				},
				"file": {
					"name": "file",
					"type": "option",
					"char": "f",
					"description": "Input file.",
					"multiple": false
				}
			},
			"args": [
				{ "name": "endpoint", "description": "Endpoint to invoke", "required": true },
				{ "name": "params", "description": "Endpoint parameters (Optional)", "required": false }
			]
		},
		"generate:command": {
			"id": "generate:command",
			"description": "Creates an command skeleton for the given module name, name and id.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"generate:command moduleName commandName commandID",
				"generate:command nft transfer 1"
			],
			"flags": {
				"template": {
					"name": "template",
					"type": "option",
					"char": "t",
					"description": "Template to bootstrap the application. It will read from `.liskrc.json` or use `lisk-ts` if not found.",
					"multiple": false
				}
			},
			"args": [
				{ "name": "moduleName", "description": "Module name.", "required": true },
				{ "name": "commandName", "description": "Asset name.", "required": true }
			]
		},
		"generate:module": {
			"id": "generate:module",
			"description": "Creates a module skeleton for the given name.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": ["generate:module nft"],
			"flags": {
				"template": {
					"name": "template",
					"type": "option",
					"char": "t",
					"description": "Template to bootstrap the application. It will read from `.liskrc.json` or use `lisk-ts` if not found.",
					"multiple": false
				}
			},
			"args": [{ "name": "moduleName", "description": "Module name.", "required": true }]
		},
		"generate:plugin": {
			"id": "generate:plugin",
			"description": "Creates custom plugin.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"generate:plugin myPlugin",
				"generate:plugin myPlugin --standalone --output ./my_plugin"
			],
			"flags": {
				"template": {
					"name": "template",
					"type": "option",
					"char": "t",
					"description": "Template to bootstrap the application. It will read from `.liskrc.json` or use `lisk-ts` if not found.",
					"multiple": false
				},
				"standalone": {
					"name": "standalone",
					"type": "boolean",
					"description": "Create a standalone plugin package.",
					"allowNo": false
				},
				"output": {
					"name": "output",
					"type": "option",
					"char": "o",
					"description": "Path to create the plugin.",
					"multiple": false,
					"dependsOn": ["standalone"]
				},
				"registry": {
					"name": "registry",
					"type": "option",
					"description": "URL of a registry to download dependencies from.",
					"multiple": false,
					"dependsOn": ["standalone"]
				}
			},
			"args": [{ "name": "name", "description": "Name of the plugin.", "required": true }]
		},
		"keys:create": {
			"id": "keys:create",
			"description": "Return keys corresponding to the given passphrase.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"keys:create",
				"keys:create --passphrase your-passphrase",
				"keys:create --passphrase your-passphrase --no-encrypt",
				"keys:create --passphrase your-passphrase --password your-password",
				"keys:create --passphrase your-passphrase --password your-password --count 2",
				"keys:create --passphrase your-passphrase --no-encrypt --count 2 --offset 1",
				"keys:create --passphrase your-passphrase --no-encrypt --count 2 --offset 1 --chainid 1",
				"keys:create --passphrase your-passphrase --password your-password --count 2 --offset 1 --chainid 1 --output /mypath/keys.json"
			],
			"flags": {
				"output": {
					"name": "output",
					"type": "option",
					"char": "o",
					"description": "The output directory. Default will set to current working directory.",
					"multiple": false
				},
				"passphrase": {
					"name": "passphrase",
					"type": "option",
					"char": "p",
					"description": "Specifies a source for your secret passphrase. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --passphrase='my secret passphrase' (should only be used where security is not important)\n",
					"multiple": false
				},
				"no-encrypt": {
					"name": "no-encrypt",
					"type": "boolean",
					"char": "n",
					"description": "No encrypted message object to be created",
					"allowNo": false
				},
				"password": {
					"name": "password",
					"type": "option",
					"char": "w",
					"description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
					"multiple": false
				},
				"count": {
					"name": "count",
					"type": "option",
					"char": "c",
					"description": "Number of keys to create",
					"multiple": false,
					"default": 1
				},
				"offset": {
					"name": "offset",
					"type": "option",
					"char": "f",
					"description": "Offset for the key derivation path",
					"multiple": false,
					"default": 0
				},
				"chainid": {
					"name": "chainid",
					"type": "option",
					"char": "i",
					"description": "Chain id",
					"multiple": false,
					"default": 0
				},
				"add-legacy": {
					"name": "add-legacy",
					"type": "boolean",
					"description": "Add legacy key derivation path to the result",
					"allowNo": false
				}
			},
			"args": []
		},
		"keys:encrypt": {
			"id": "keys:encrypt",
			"description": "Encrypt keys from a file and overwrite the file",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"keys:encrypt --file-path ./my/path/keys.json",
				"keys:encrypt --file-path ./my/path/keys.json --password mypass"
			],
			"flags": {
				"file-path": {
					"name": "file-path",
					"type": "option",
					"char": "f",
					"description": "Path of the file to encrypt from",
					"required": true,
					"multiple": false
				},
				"password": {
					"name": "password",
					"type": "option",
					"char": "w",
					"description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
					"multiple": false
				}
			},
			"args": []
		},
		"keys:export": {
			"id": "keys:export",
			"description": "Export to <FILE>.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"keys:export --output /mypath/keys.json",
				"keys:export --output /mypath/keys.json --data-path ./data "
			],
			"flags": {
				"data-path": {
					"name": "data-path",
					"type": "option",
					"char": "d",
					"description": "Directory path to specify where node data is stored. Environment variable \"LISK_DATA_PATH\" can also be used.",
					"multiple": false
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed.",
					"allowNo": false
				},
				"output": {
					"name": "output",
					"type": "option",
					"char": "o",
					"description": "The output directory. Default will set to current working directory.",
					"required": true,
					"multiple": false
				}
			},
			"args": []
		},
		"keys:import": {
			"id": "keys:import",
			"description": "Import from <FILE>.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"keys:import --file-path ./my/path/keys.json",
				"keys:import --file-path ./my/path/keys.json --data-path ./data "
			],
			"flags": {
				"data-path": {
					"name": "data-path",
					"type": "option",
					"char": "d",
					"description": "Directory path to specify where node data is stored. Environment variable \"LISK_DATA_PATH\" can also be used.",
					"multiple": false
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed.",
					"allowNo": false
				},
				"file-path": {
					"name": "file-path",
					"type": "option",
					"char": "f",
					"description": "Path of the file to import from",
					"required": true,
					"multiple": false
				}
			},
			"args": []
		},
		"message:decrypt": {
			"id": "message:decrypt",
			"description": "\n\tDecrypts a previously encrypted message using your the password used to encrypt.\n\t",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": ["message:decrypt "],
			"flags": {
				"password": {
					"name": "password",
					"type": "option",
					"char": "w",
					"description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
					"multiple": false
				},
				"message": {
					"name": "message",
					"type": "option",
					"char": "m",
					"description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
					"multiple": false
				}
			},
			"args": [{ "name": "message", "description": "Encrypted message." }]
		},
		"message:encrypt": {
			"id": "message:encrypt",
			"description": "\n\tEncrypts a message with a password provided.\n\t",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": ["message:encrypt \"Hello world\""],
			"flags": {
				"password": {
					"name": "password",
					"type": "option",
					"char": "w",
					"description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
					"multiple": false
				},
				"message": {
					"name": "message",
					"type": "option",
					"char": "m",
					"description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
					"multiple": false
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed.",
					"allowNo": false
				},
				"stringify": {
					"name": "stringify",
					"type": "boolean",
					"char": "s",
					"description": "Display encrypted message in stringified format",
					"allowNo": false
				}
			},
			"args": [{ "name": "message", "description": "Message to encrypt." }]
		},
		"message:sign": {
			"id": "message:sign",
			"description": "\n\tSigns a message using your secret passphrase.\n\t",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": ["message:sign \"Hello world\""],
			"flags": {
				"json": {
					"name": "json",
					"type": "boolean",
					"char": "j",
					"description": "Prints output in JSON format. You can change the default behavior in your config.json file.",
					"allowNo": true
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behavior in your config.json file.",
					"allowNo": true
				},
				"passphrase": {
					"name": "passphrase",
					"type": "option",
					"char": "p",
					"description": "Specifies a source for your secret passphrase. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --passphrase='my secret passphrase' (should only be used where security is not important)\n",
					"multiple": false
				},
				"message": {
					"name": "message",
					"type": "option",
					"char": "m",
					"description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
					"multiple": false
				}
			},
			"args": [{ "name": "message", "description": "Message to sign." }]
		},
		"message:verify": {
			"id": "message:verify",
			"description": "\n\tVerifies a signature for a message using the signer’s public key.\n\t",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"message:verify 647aac1e2df8a5c870499d7ddc82236b1e10936977537a3844a6b05ea33f9ef6 2a3ca127efcf7b2bf62ac8c3b1f5acf6997cab62ba9fde3567d188edcbacbc5dc8177fb88d03a8691ce03348f569b121bca9e7a3c43bf5c056382f35ff843c09 \"Hello world\""
			],
			"flags": {
				"json": {
					"name": "json",
					"type": "boolean",
					"char": "j",
					"description": "Prints output in JSON format. You can change the default behavior in your config.json file.",
					"allowNo": true
				},
				"pretty": {
					"name": "pretty",
					"type": "boolean",
					"description": "Prints JSON in pretty format rather than condensed. Has no effect if the output is set to table. You can change the default behavior in your config.json file.",
					"allowNo": true
				},
				"message": {
					"name": "message",
					"type": "option",
					"char": "m",
					"description": "Specifies a source for providing a message to the command. If a string is provided directly as an argument, this option will be ignored. The message must be provided via an argument or via this option. Sources must be one of `file` or `stdin`. In the case of `file`, a corresponding identifier must also be provided.\n\tNote: if both secret passphrase and message are passed via stdin, the passphrase must be the first line.\n\tExamples:\n\t- --message=file:/path/to/my/message.txt\n\t- --message=\"hello world\"\n",
					"multiple": false
				}
			},
			"args": [
				{
					"name": "publicKey",
					"description": "Public key of the signer of the message.",
					"required": true
				},
				{ "name": "signature", "description": "Signature to verify.", "required": true },
				{ "name": "message", "description": "Message to verify." }
			]
		},
		"passphrase:create": {
			"id": "passphrase:create",
			"description": "Returns a randomly generated 24 words mnemonic passphrase.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": ["passphrase:create", "passphrase:create --output /mypath/passphrase.json"],
			"flags": {
				"output": {
					"name": "output",
					"type": "option",
					"char": "o",
					"description": "The output directory. Default will set to current working directory.",
					"multiple": false
				}
			},
			"args": []
		},
		"passphrase:decrypt": {
			"id": "passphrase:decrypt",
			"description": "Decrypt secret passphrase using the password provided at the time of encryption.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"passphrase:decrypt --file-path ./my/path/output.json",
				"passphrase:decrypt --file-path ./my/path/output.json --password your-password"
			],
			"flags": {
				"password": {
					"name": "password",
					"type": "option",
					"char": "w",
					"description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
					"multiple": false
				},
				"file-path": {
					"name": "file-path",
					"type": "option",
					"char": "f",
					"description": "Path of the file to import from",
					"required": true,
					"multiple": false
				}
			},
			"args": []
		},
		"passphrase:encrypt": {
			"id": "passphrase:encrypt",
			"description": "Encrypt secret passphrase using password.",
			"strict": true,
			"pluginName": "lisk-commander",
			"pluginAlias": "lisk-commander",
			"pluginType": "core",
			"aliases": [],
			"examples": [
				"passphrase:encrypt",
				"passphrase:encrypt --passphrase your-passphrase --output /mypath/keys.json",
				"passphrase:encrypt --password your-password",
				"passphrase:encrypt --password your-password --passphrase your-passphrase --output /mypath/keys.json",
				"passphrase:encrypt --output-public-key --output /mypath/keys.json"
			],
			"flags": {
				"password": {
					"name": "password",
					"type": "option",
					"char": "w",
					"description": "Specifies a source for your secret password. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --password=pass:password123 (should only be used where security is not important)\n",
					"multiple": false
				},
				"passphrase": {
					"name": "passphrase",
					"type": "option",
					"char": "p",
					"description": "Specifies a source for your secret passphrase. Command will prompt you for input if this option is not set.\n\tExamples:\n\t- --passphrase='my secret passphrase' (should only be used where security is not important)\n",
					"multiple": false
				},
				"output-public-key": {
					"name": "output-public-key",
					"type": "boolean",
					"description": "Includes the public key in the output. This option is provided for the convenience of node operators.",
					"allowNo": false
				},
				"output": {
					"name": "output",
					"type": "option",
					"char": "o",
					"description": "The output directory. Default will set to current working directory.",
					"multiple": false
				}
			},
			"args": []
		}
	}
}
