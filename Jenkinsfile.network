/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 */

@Library('lisk-jenkins') _

properties([
	parameters([
		string(name: 'LOG_LEVEL', defaultValue: 'error', description: 'To get desired build log output change the log level', ),
		string(name: 'LOG_DB_EVENTS', defaultValue: 'false', description: 'To get detailed info on db events log.', ),
		string(name: 'FILE_LOG_LEVEL', defaultValue: 'error', description: 'To get desired file log output change the log level', ),
		string(name: 'SILENT', defaultValue: 'true', description: 'To turn off test debug logs.', ),
	 ])
])

pipeline {
	agent { node { label 'lisk-core-network' } }
	stages {
		stage('Build') {
			steps {
				ansiColor('xterm') {
					nvm(getNodejsVersion()) {
						sh '''
						sudo service postgresql restart
						npm ci
						'''
					}
				}
			}
		}
		stage('Run network tests') {
			steps {
				ansiColor('xterm') {
					nvm(getNodejsVersion()) {
						sh '''#!/bin/bash -xe
						set -o pipefail
						if [ params.JENKINS_PROFILE == 'jenkins-extensive' ]; then
							npm test -- mocha:extensive:network |& tee networkTests.logs
						else
							npm test -- mocha:default:network |& tee networkTests.logs
						fi
						'''
					}
				}
			}
		}
	}
	post {
		always {
			nvm(getNodejsVersion()) {
				sh './node_modules/.bin/pm2 kill || true'
			}
		}
		failure {
			script {
				build_info = getBuildInfo()
				liskSlackSend('danger', "Job ${build_info} failed (<${env.BUILD_URL}/console|console>, <${env.BUILD_URL}/changes|changes>)\n", 'lisk-ci-core')
			}
		}
		success {
			script {
				build_info = getBuildInfo()
				liskSlackSend('good', "Job ${build_info} was successful.", 'lisk-ci-core')
			}
		}
	}
}
// vim: filetype=groovy
